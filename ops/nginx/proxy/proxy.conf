# frontend
upstream up_frontend {
    server localhost:3000;
}
# authentication-service
upstream up_auth {
    server localhost:1337;
}
# query-service
upstream up_query {
    server localhost:1338;
}
# media-url-provider
upstream up_media {
    server localhost:1339;
}
# playlist
upstream up_playlist {
    server localhost:1341;
}
# swagger
upstream up_swagger {
    server localhost:1335;
}
# user
upstream up_user {
    server localhost:1342;
}
# mission-ui
upstream up_mission_ui {
    server localhost:1550;
}

# start of variables mapping
# we must handle OPTIONS request in nginx, because
# ngx_http_auth_request_module sends GET request, even if nginx got an "OPTIONS" request.
# sails (authentication-service) consider GET request as normal and require Authorization
# header to be set, which is not the case for "OPTIONS" request.
map $http_origin $allow_origin {
  default "";
  # allow all origins
  # TODO: change on production!
  "~(.*)" "$http_origin";
}

map $request_method $cors_method {
  default "allowed";
  "OPTIONS" "preflight";
}

map $cors_method $cors_max_age {
  default "";
  "preflight" 1728000;
}

map $cors_method $cors_allow_methods {
  default "";
  "preflight" "GET, POST, OPTIONS";
}

map $cors_method $cors_allow_headers {
  default "";
  "preflight" "Authorization";
}

map $cors_method $cors_content_length {
  #default $initial_content_length;
  "preflight" 0;
}

map $cors_method $cors_content_type {
  default $initial_content_type;
  "preflight" "text/plain charset=UTF-8";
}
# end of variables mapping

server {
    listen       443 ssl;
    server_name  localhost;
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         HIGH:!aNULL:!MD5;     

    # frontend
    location / {
        proxy_pass   https://up_frontend;
        # proxing webSockets, get rid on production
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # start of central CORS handling
    add_header 'Access-Control-Allow-Origin' $allow_origin;
    add_header 'Access-Control-Allow-Credentials' 'true';
    add_header 'Access-Control-Max-Age' $cors_max_age;
    add_header 'Access-Control-Allow-Methods' $cors_allow_methods;
    add_header 'Access-Control-Allow-Headers' $cors_allow_headers;

    set $initial_content_length $sent_http_content_length;
    add_header 'Content-Length' $cors_content_length;

    set $initial_content_type $sent_http_content_type;
    add_header 'Content-Type' $cors_content_type;

    # if statement in a "server" scope, that is totally safe
    if ($request_method = 'OPTIONS') {
        return 204;
    }
    proxy_hide_header 'Access-Control-Allow-Origin';
    proxy_hide_header 'Access-Control-Allow-Credentials';
    proxy_hide_header 'Access-Control-Allow-Methods';
    proxy_hide_header 'Access-Control-Allow-Headers';
    proxy_hide_header 'Access-Control-Expose-Headers';
    # end of central CORS handling

    # auth
    location /auth {
        proxy_pass   https://up_auth/auth;
    }

    # mission
    location /api/v0.1/mission {
        proxy_pass   http://up_query/mission;
        auth_request   /auth;
    }

    # query
    location /api/v0.1/query {
        proxy_pass   http://up_query/query;
        auth_request   /auth;
    }

    # source
    location /api/v0.1/source {
        proxy_pass   http://up_query/source;
        auth_request   /auth;
    }

    # tag
    location /api/v0.1/tag {
        proxy_pass   http://up_query/tag;
        auth_request   /auth;
    }

    # mission
    location /api/v0.1/mission/ {
        proxy_pass   http://localhost:1338/mission;
        auth_request   /auth;        
    }

    # media
    location /api/v0.1/media {
        proxy_pass   http://up_media/media;
        auth_request   /auth;
    }

    # user
    location /api/v0.1/user/ {
        proxy_pass   http://up_user/user;
        auth_request   /auth;
    }

    # playlist
    location /api/v0.1/playlist {
        proxy_pass   http://up_playlist/playlist;
        auth_request   /auth;
    }

    # swagger
    location /api/v0.1/swagger {
        proxy_pass  http://up_swagger/swagger;
    }

    # mission-ui
    location /mission/ui {
        proxy_pass   http://up_mission_ui;
        auth_request   /auth;
    }
}
